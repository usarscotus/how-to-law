---
import LessonLayout from '~/layouts/LessonLayout.astro';
import { getCollection } from 'astro:content';
import { getLessonOrder, getModuleMeta } from '~/lib/utils';

export async function getStaticPaths() {
  const lessons = await getCollection('classroom');
  return lessons.map((entry) => {
    const [module, lesson] = entry.slug.split('/');
    return {
      params: { module, lesson }
    };
  });
}

const { module, lesson } = Astro.params;
const lessons = await getCollection('classroom');
const moduleLessons = lessons
  .filter((entry) => entry.slug.startsWith(`${module}/`))
  .sort((a, b) => getLessonOrder(a) - getLessonOrder(b));

const entry = moduleLessons.find((item) => item.slug.split('/')[1] === lesson);
if (!entry) {
  throw new Error('Lesson not found');
}

const index = moduleLessons.findIndex((item) => item.id === entry.id);
const fallbackModuleTitle = entry.data.moduleTitle ?? entry.data.moduleLabel ?? entry.data.module;
const moduleMeta = getModuleMeta(module ?? entry.data.module) ?? {
  id: entry.data.module,
  title: fallbackModuleTitle,
  description: fallbackModuleTitle
};

const prevEntry = index > 0 ? moduleLessons[index - 1] : undefined;
const nextEntry = index < moduleLessons.length - 1 ? moduleLessons[index + 1] : undefined;

const toUrl = (item: typeof entry) => `/how-to-law/classroom/${module}/${item.slug.split('/')[1]}/`;
---
<LessonLayout
  entry={entry}
  moduleId={moduleMeta.id}
  moduleTitle={moduleMeta.title}
  position={index + 1}
  totalLessons={moduleLessons.length}
  prevLesson={prevEntry ? { title: prevEntry.data.title, url: toUrl(prevEntry) } : undefined}
  nextLesson={nextEntry ? { title: nextEntry.data.title, url: toUrl(nextEntry) } : undefined}
/>
