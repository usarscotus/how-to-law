---
import LessonLayout from '~/layouts/LessonLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { getModuleMeta } from '~/lib/utils';
import { Term, Quiz, Callout, Flow, CaseCard, ProgressBar, ProgressRing } from 'src/components';

type Lesson = CollectionEntry<'classroom'>;
type Crumb = { label: string; href: string };

const moduleParam = Astro.params.module;
const lessonParam = Astro.params.lesson;

if (!moduleParam || !lessonParam) {
  throw new Error('Missing module or lesson parameters.');
}

const allLessons = await getCollection('classroom');

const lessonsForModule = allLessons
  .filter((entry) => entry.slug.split('/')[0] === moduleParam)
  .map((entry, index) => ({ entry, index }));

lessonsForModule.sort((a, b) => {
  const orderA = typeof a.entry.data.order === 'number' ? a.entry.data.order : null;
  const orderB = typeof b.entry.data.order === 'number' ? b.entry.data.order : null;

  if (orderA !== null && orderB !== null && orderA !== orderB) {
    return orderA - orderB;
  }

  if (orderA !== null && orderB === null) {
    return -1;
  }

  if (orderA === null && orderB !== null) {
    return 1;
  }

  const slugComparison = a.entry.slug.localeCompare(b.entry.slug);
  if (slugComparison !== 0) {
    return slugComparison;
  }

  return a.index - b.index;
});

const sortedLessons: Lesson[] = lessonsForModule.map((item) => item.entry);

const getLessonSegment = (lesson: Lesson) => {
  const [, second] = lesson.slug.split('/');
  return second ?? lesson.slug;
};

const currentLesson = sortedLessons.find((lesson) => getLessonSegment(lesson) === lessonParam);

if (!currentLesson) {
  throw new Error(`Lesson not found for slug: ${lessonParam}`);
}

const currentIndex = sortedLessons.findIndex((lesson) => lesson.id === currentLesson.id);

const prevLesson = currentIndex > 0 ? sortedLessons[currentIndex - 1] : undefined;
const nextLesson = currentIndex < sortedLessons.length - 1 ? sortedLessons[currentIndex + 1] : undefined;

const basePath = '/how-to-law';

const moduleTitle =
  currentLesson.data.moduleTitle ??
  currentLesson.data.moduleLabel ??
  currentLesson.data.module ??
  moduleParam;

const breadcrumbs: Crumb[] = [
  { label: 'Home', href: `${basePath}/` },
  { label: 'Classroom', href: `${basePath}/classroom/` },
  { label: moduleTitle, href: `${basePath}/classroom/${moduleParam}/` },
  { label: currentLesson.data.title ?? lessonParam, href: `${basePath}/classroom/${moduleParam}/${lessonParam}/` }
];

const moduleMeta = getModuleMeta(moduleParam) ?? {
  id: moduleParam,
  title: moduleTitle,
  description: moduleTitle
};

const moduleHref = breadcrumbs[2]?.href ?? `${basePath}/classroom/${moduleParam}/`;
const toUrl = (lesson: Lesson) => `${moduleHref}${getLessonSegment(lesson)}/`;

const rendered = await currentLesson.render();
const { Content } = rendered;

const mdxComponents = { Term, Quiz, Callout, Flow, CaseCard, ProgressBar, ProgressRing };

const patchedEntry = {
  ...currentLesson,
  async render() {
    return {
      ...rendered,
      Content: (props: Parameters<typeof Content>[0]) => (
        <Content {...props} components={mdxComponents} />
      )
    };
  }
} as Lesson;
---
<LessonLayout
  entry={patchedEntry}
  moduleId={moduleMeta.id}
  moduleTitle={moduleMeta.title}
  position={currentIndex + 1}
  totalLessons={sortedLessons.length}
  prevLesson={prevLesson ? { title: prevLesson.data.title, url: toUrl(prevLesson) } : undefined}
  nextLesson={nextLesson ? { title: nextLesson.data.title, url: toUrl(nextLesson) } : undefined}
/>
